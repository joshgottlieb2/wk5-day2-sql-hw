-- This is a comment

--CRUD - create, read, update, delete

--Creating Data
--INSERT

--Reading Data
--SELECT

--Updating Data
--UPDATE

--Deleting Data
--DELETE

--Get all columns from actor table
SELECT *  -- * means all
FROM actor;

--can get specific columns
SELECT title, description, release_year
FROM film;

--conditionals, WHERE
SELECT *
FROM film
WHERE rental_rate < 4;

--conditional Queries with Strings
SELECT *
FROM actor
WHERE first_name = 'Nick';

--conditional query with LIKE (uses like instead of =)
SELECT *
FROM actor
WHERE first_name LIKE 'Nick';

-- % is a widcard

SELECT *
FROM actor
WHERE first_name LIKE 'N%';

SELECT *
FROM actor
WHERE first_name LIKE 'N%k';

--% can be an number of any character. _ is just 1 item in that place

SELECT *
FROM actor
WHERE first_name LIKE '___k';

--Comparing Operators
--"=" 
--"<"
--">"
--"<>" means not equal

SELECT *
FROM payment;

SELECT *
FROM payment
WHERE amount <5.99;

--get all papyments not equal to 5.99
SELECT *
FROM payment
WHERE amount <> 5.99;

--Compound where clause
SELECT *
FROM payment
WHERE amount = 5.99 OR amount = 7.99;

SELECT *
FROM payment
WHERE (amount = 5.99 OR amount = 7.99) AND staff_id = 2;

--Exercise: Get all rentals handled by staff where the customer's id is greater than 400
SELECT *
FROM rental
WHERE customer_id > 400 AND staff_id = 1;

SELECT *
FROM payment
WHERE amount > 2.99 and amount<7.99;

--Between keyword --(endpoints inclusive)
SELECT *
FROM payment
WHERE amount BETWEEN 2.99 AND 7.99;

-- ORDER
-- Order payments from smallest to largest
SELECT *
FROM payment
ORDER BY amount;

--order descending
SELECT *
FROM payment
ORDER BY amount DESC;

--Query for data that shows customers who paid an amount 
--not equal to $0.00
--Order results decending
SELECT *
FROM payment
WHERE amount <> 0.00
ORDER BY amount DESC;

--Aggregate Functions SUM(), AVG(), COUNT(), MIN(), MAX()

--Total payment amount
SELECT SUM(amount)
FROM payment;

--find total payments handled by staff 1
SELECT SUM(amount)
FROM payment
WHERE staff_id = 1;

--You are customer 13.  Find total you've spent on rentals over 4.99
SELECT SUM(amount)
FROM payment
WHERE customer_id = 13 and amount > 4.99;

--Find avg payment
SELECT AVG(amount)
FROM payment;

SELECT COUNT(*)
FROM payment
WHERE amount = 5.99;

--column alias
SELECT SUM(amount) AS Total_sum
FROM payment;



